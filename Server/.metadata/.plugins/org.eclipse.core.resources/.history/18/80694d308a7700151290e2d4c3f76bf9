package server;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Iterator;
import java.util.Map;
import java.util.Properties;
import java.util.StringTokenizer;

import database.ReadAutoToAutomobile;

import model.Automobile;

import adapter.BuildAuto;
import adapter.CreateAuto;
import adapter.ProxyAutomobile;

public class ServerAuto {
	public String state = "Empty";
	
	private InputStream is;
    private OutputStream os;
    
    public void configure(InputStream is, OutputStream os) {
    	this.is = is;
    	this.os = os;
    }
	
	/*Constructor*/
	public ServerAuto(){	}
	/*List of activities of server*/
//	public void serverActivity(ServerSocket ss, Socket s, 
//			 				   BuildAuto buildAutoObj) {
//		if(state.equalsIgnoreCase("EMPTY")) {
//			String temp = readFromClient(ss, s, buildAutoObj, "EMPTY");
//			System.out.println("Read from client");
//			if(temp.equalsIgnoreCase("C_SEND_CAR_LIST"))
//				state = "S_SENT_CAR_LIST";
//			if(temp.equalsIgnoreCase("C_SEND_CAR_INI"))
//				state = "S_WAIT_CAR_INI";
//		}
//		else{/*Do nothing*/}
//		if(state.equalsIgnoreCase("S_SENT_CAR_LIST")) {
//			String it1 = "";
//			System.out.println("Server sending model list");
//			for(String it : ProxyAutomobile.getA1().keySet()) {
//				it1 = it1 + it+"\n";
//			}
//			sendToClient(it1, s);
//			state = "S_WAIT_CAR_NAME";
//		}
//		else if(state.equalsIgnoreCase("S_WAIT_CAR_NAME")) {
//			readFromClient(ss, s, buildAutoObj, "S_WAIT_CAR_NAME");
//			state = "S_SENT_CAR_PROP";
//		}
//		else if(state.equalsIgnoreCase("S_SENT_CAR_PROP")) {
//			state = "EMPTY";
//		}
//		else if(state.equalsIgnoreCase("S_WAIT_CAR_INI")) {
//			readFromClient(ss, s, buildAutoObj, "S_WAIT_CAR_INI");
//			state = "S_ACK_CAR_INI";
//		}
//		else if(state.equalsIgnoreCase("S_ACK_CAR_INI")) {
//			state = "EMPTY";
//		}
//		else {
//			state = "EMPTY";
//			System.exit(1);
//		}
//	}
	public void serverActivity(ServerSocket ss, Socket s, 
			   BuildAuto buildAutoObj) {
		if(state.equalsIgnoreCase("EMPTY")) {
			String temp = readFromClient(ss, s, buildAutoObj, "EMPTY");
			System.out.println("Read from client");
			if(temp.equalsIgnoreCase("C_SEND_CAR_LIST"))
				state = "S_SENT_CAR_LIST";
			if(temp.equalsIgnoreCase("C_SEND_CAR_INI"))
				state = "S_WAIT_CAR_INI";
			}
			else{/*Do nothing*/}
			if(state.equalsIgnoreCase("S_SENT_CAR_LIST")) {
				String it1 = "";
				System.out.println("Server sending model list");
				for(String it : ProxyAutomobile.getA1().keySet()) {
					it1 = it1 + it+"\n";
				}
				sendToClient(it1, s);
				
				//readFromClient(ss, s, buildAutoObj, "S_WAIT_CAR_NAME");
				state = "EMPTY";
			}
			else if(state.equalsIgnoreCase("S_WAIT_CAR_INI")) {
				readFromClient(ss, s, buildAutoObj, "S_WAIT_CAR_INI");
				state = "EMPTY";
			}
			else {
				state = "EMPTY";
				System.exit(1);
			}
		}
	/*Receive from client the data and deserialize according to 
	 * object received*/
	public String readFromClient(ServerSocket ss, Socket s, 
								 BuildAuto buildAutoObj, String action) {
		String readSuccessful = "";
		
		try {
				//InputStream is = s.getInputStream();
				ObjectInputStream ois = new ObjectInputStream(is);
				System.out.println("action:"+action);
				if(action.equalsIgnoreCase("EMPTY")) {
					String to = (String)ois.readObject();
					if (to!=null && (to.equalsIgnoreCase("C_SEND_CAR_LIST")) || 
									(to.equalsIgnoreCase("C_SEND_CAR_INI"))){
						return to;
					}
					else if(to!=null && (to.contains("CAR_SELECTED:"))){
						Automobile a1 = new Automobile();
						Automobile a1d = new Automobile();
						ReadAutoToAutomobile r = new ReadAutoToAutomobile();
						StringTokenizer st = new StringTokenizer(to,":");
						st.nextToken();
						if(st.nextToken().equalsIgnoreCase("ZTWFord")) {
							a1 = ProxyAutomobile.getA1().get("ZTWFord");
							//a1d = r.readAutomobile("'ZTWFord'", a1d);
						}
						else {
							a1 = ProxyAutomobile.getA1().get("Model XTesla");
							//a1d = r.readAutomobile("'Model XTesla'", a1);
						}
						sendToClient(a1,s);
						readSuccessful = "SELECTED_CAR_CONFIG_SENT";
						System.out.println(readSuccessful);
						state = "EMPTY";
					}
				}
				/*else if(action.equalsIgnoreCase("S_WAIT_CAR_NAME")) {
					String to = (String)ois.readObject();
					if(to!=null && (to.contains("CAR_SELECTED:"))){
						Automobile a1 = new Automobile();
						StringTokenizer st = new StringTokenizer(to,":");
						st.nextToken();
						if(st.nextToken().equalsIgnoreCase("0"))
							a1 = ProxyAutomobile.getA1().get("ZTWFord");
						else
							a1 = ProxyAutomobile.getA1().get("Model XTesla");
						sendToClient(a1,s);
						readSuccessful = "SELECTED_CAR_CONFIG_SENT";
					}
				}*/
				else if(action.equalsIgnoreCase("S_WAIT_CAR_INI")) {
					Properties to = (Properties)ois.readObject();
					if (to!=null){
						buildFromProp(to,buildAutoObj);
						ReadAutoToAutomobile r = new ReadAutoToAutomobile();
						r.parsePropertiesObject(to);
						sendToClient("S_ACK_CAR_INI", s);
					}
					else {}
				}
		}catch(Exception e){
			System.out.println(e);
		}
		
		return readSuccessful;
	}
	
	/*Serialize string object and send to client*/
	public void sendToClient(String s, Socket serverSocket1) {
		try{
			//OutputStream os = serverSocket1.getOutputStream();
			ObjectOutputStream oos = new ObjectOutputStream(os);
			oos.writeObject(s);
			}catch(Exception e){System.out.println(e);}
			//System.out.println("Data sent to server");
	}
	/*Serialize automobile object and send to client*/
	public void sendToClient(Automobile s, Socket serverSocket1) {
		try{
			OutputStream os = serverSocket1.getOutputStream();
			ObjectOutputStream oos = new ObjectOutputStream(os);
			oos.flush();
			oos.writeObject(s);
			System.out.println(oos);
			}catch(Exception e){System.out.println(e);}
	}
	/*Build automobile object from properties file and add to 
	 * build auto object.*/
	public void buildFromProp(Properties props, BuildAuto obj) {        
        BuildCarModelOptions buildObject = new BuildCarModelOptions();
        Automobile a1 = buildObject.createAutomobileFromProp(props, obj);
        Automobile a1d = buildObject.createAutomobileFromProp(props, obj);
        buildObject.addAutoMap(obj, a1);
        obj.printAuto(a1.getModel(), a1.getMake());
	}
}
